
%%% Preamble Requirements %%%
% \usepackage{geometry}
% \usepackage{amsfonts}
% \usepackage{amsmath}
% \usepackage{amssymb}
% \usepackage{tikz}

% Optional packages such as sfmath set through python interface
% \usepackage{sfmath}

% \usetikzlibrary{arrows,chains,positioning,scopes,shapes.geometric,shapes.misc,shadows}

%%% End Preamble Requirements %%%

\input{"D:/Documents/GitHub/OpenMDAO-XDSM/venv_py/lib/site-packages/pyxdsm/diagram_styles"}
\begin{tikzpicture}

\matrix[MatrixSetup]{
%Row 0
&
\node [DataIO] (output_Driver) {$\begin{array}{c}z^{(0)} \\ x^{(0)}\end{array}$};&
&
&
&
&
&
\\
%Row 1
\node [DataIO] (left_output_Driver) {$\begin{array}{c}z^{*} \\ x^{*}\end{array}$};&
\node [Optimization] (Driver) {$\text{\text{0, 7 $ \rightarrow $ 1: Driver}}$};&
\node [DataInter] (Driver-cycle@d1) {$\begin{array}{c}z \\ x\end{array}$};&
\node [DataInter] (Driver-cycle@d2) {$\begin{array}{c}z \\ x\end{array}$};&
\node [DataInter] (Driver-obj@cmp) {$\begin{array}{c}z \\ x\end{array}$};&
&
&
\\
%Row 2
\node [DataIO] (left_output_cycle@d1) {$\begin{array}{c}z^{*} \\ x^{*}\end{array}$};&
&
\node [Function] (cycle@d1) {$\text{\text{1: d1}}$};&
\node [DataInter] (cycle@d1-cycle@d2) {$\begin{array}{c}y1\end{array}$};&
\node [DataInter] (cycle@d1-obj@cmp) {$\begin{array}{c}y1\end{array}$};&
\node [DataInter] (cycle@d1-con@cmp1) {$\begin{array}{c}y1\end{array}$};&
&
\\
%Row 3
\node [DataIO] (left_output_cycle@d2) {$\begin{array}{c}z^{*} \\ x^{*}\end{array}$};&
&
\node [DataInter] (cycle@d2-cycle@d1) {$\begin{array}{c}y2\end{array}$};&
\node [Function] (cycle@d2) {$\text{\text{2: d2}}$};&
\node [DataInter] (cycle@d2-obj@cmp) {$\begin{array}{c}y2\end{array}$};&
&
\node [DataInter] (cycle@d2-con@cmp2) {$\begin{array}{c}y2\end{array}$};&
\\
%Row 4
\node [DataIO] (left_output_obj@cmp) {$\begin{array}{c}obj^{*}\end{array}$};&
\node [DataInter] (obj@cmp-Driver) {$\begin{array}{c}obj\end{array}$};&
&
&
\node [Function] (obj@cmp) {$\text{\text{3: obj\_cmp}}$};&
&
&
\\
%Row 5
\node [DataIO] (left_output_con@cmp1) {$\begin{array}{c}con1^{*}\end{array}$};&
\node [DataInter] (con@cmp1-Driver) {$\begin{array}{c}con1\end{array}$};&
&
&
&
\node [Function] (con@cmp1) {$\text{\text{4: con\_cmp1}}$};&
&
\\
%Row 6
\node [DataIO] (left_output_con@cmp2) {$\begin{array}{c}con2^{*}\end{array}$};&
\node [DataInter] (con@cmp2-Driver) {$\begin{array}{c}con2\end{array}$};&
&
&
&
&
\node [Function] (con@cmp2) {$\text{\text{5: con\_cmp2}}$};&
\\
%Row 7
&
&
&
&
&
&
&
\\
};

% XDSM process chains
{ [start chain=process]
 \begin{pgfonlayer}{process} 
\chainin (Driver);
\chainin (cycle@d1) [join=by ProcessHV];
\chainin (cycle@d2) [join=by ProcessHV];
\chainin (obj@cmp) [join=by ProcessHV];
\chainin (con@cmp1) [join=by ProcessHV];
\chainin (con@cmp2) [join=by ProcessHV];
\chainin (Driver) [join=by ProcessHV];
\end{pgfonlayer}
}

\begin{pgfonlayer}{data}
\path
% Horizontal edges
(Driver) edge [DataLine] (Driver-cycle@d1)
(Driver) edge [DataLine] (Driver-cycle@d2)
(Driver) edge [DataLine] (Driver-obj@cmp)
(obj@cmp) edge [DataLine] (obj@cmp-Driver)
(con@cmp1) edge [DataLine] (con@cmp1-Driver)
(con@cmp2) edge [DataLine] (con@cmp2-Driver)
(cycle@d1) edge [DataLine] (cycle@d1-con@cmp1)
(cycle@d1) edge [DataLine] (cycle@d1-cycle@d2)
(cycle@d1) edge [DataLine] (cycle@d1-obj@cmp)
(cycle@d2) edge [DataLine] (cycle@d2-con@cmp2)
(cycle@d2) edge [DataLine] (cycle@d2-cycle@d1)
(cycle@d2) edge [DataLine] (cycle@d2-obj@cmp)
(cycle@d1) edge [DataLine] (left_output_cycle@d1)
(Driver) edge [DataLine] (left_output_Driver)
(cycle@d2) edge [DataLine] (left_output_cycle@d2)
(obj@cmp) edge [DataLine] (left_output_obj@cmp)
(con@cmp1) edge [DataLine] (left_output_con@cmp1)
(con@cmp2) edge [DataLine] (left_output_con@cmp2)
% Vertical edges
(Driver-cycle@d1) edge [DataLine] (cycle@d1)
(Driver-cycle@d2) edge [DataLine] (cycle@d2)
(Driver-obj@cmp) edge [DataLine] (obj@cmp)
(obj@cmp-Driver) edge [DataLine] (Driver)
(con@cmp1-Driver) edge [DataLine] (Driver)
(con@cmp2-Driver) edge [DataLine] (Driver)
(cycle@d1-con@cmp1) edge [DataLine] (con@cmp1)
(cycle@d1-cycle@d2) edge [DataLine] (cycle@d2)
(cycle@d1-obj@cmp) edge [DataLine] (obj@cmp)
(cycle@d2-con@cmp2) edge [DataLine] (con@cmp2)
(cycle@d2-cycle@d1) edge [DataLine] (cycle@d1)
(cycle@d2-obj@cmp) edge [DataLine] (obj@cmp)
(Driver) edge [DataLine] (output_Driver);
\end{pgfonlayer}

\end{tikzpicture}
